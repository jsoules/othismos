{
  "algorithms": [
    {
      "_id": "5e795ef5d4f81c62f9a1a7b8",
      "label": "IRONCLUST",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/ironclust/container/Dockerfile",
      "environment": "MATLAB",
      "wrapper": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/ironclust/_ironclust.py",
      "website": "https://github.com/jamesjun/ironclust",
      "authors": "James J. Jun",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_ironclust.md",
      "markdown": "_\n# IRONCLUST\n\n## Description\n\nSpike sorting software developed at Flatiron Institute, based on JRCLUST (Janelia Rocket Clust).\n\n## Installation notes\n\n**Prerequisites:**\n\n* MATLAB with the following\n  - Statistics and Machine Learning Toolbox\n  - Parallel Computing Toolbox\n\n## References",
      "__v": 0
    },
    {
      "_id": "5e795ef5d4f81c62f9a1a7b7",
      "label": "KILOSORT",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/kilosort/container/Dockerfile",
      "environment": "MATLAB",
      "wrapper": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/kilosort/_kilosort.py",
      "website": "https://github.com/cortex-lab/KiloSort",
      "authors": "Marius Pachitariu",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_kilosort.md",
      "markdown": "_\n# KILOSORT\n\n## Description\n\n*From the KiloSort website*: Fast spike sorting for hundreds of channels. Implements an integrated template matching framework for detecting and clustering spikes from multi-channel electrophysiological recordings.\n\n## References\n\n[1] Pachitariu, Marius, et al. \"Fast and accurate spike sorting of high-channel count probes with KiloSort.\" Advances in Neural Information Processing Systems. 2016.\n\n[2] Pachitariu, Marius, et al. \"Kilosort: realtime spike-sorting for extracellular electrophysiology with hundreds of channels.\" BioRxiv (2016): 061481.",
      "__v": 0
    },
    {
      "_id": "5e795ef5d4f81c62f9a1a7b5",
      "label": "TRIDESCLOUS",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/tridesclous/container/Dockerfile",
      "wrapper": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/tridesclous/_tridesclous.py",
      "website": "https://github.com/tridesclous/tridesclous",
      "authors": "Samuel Garcia and Christophe Pouzat",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_tridesclous.md",
      "markdown": "_\n# TRIDESCLOUS\n\n## Description\n\nFrom the Tridesclous website: The primary goal of tridesclous is to provide a toolkit to teach good practices in spike sorting techniques.\nThis tools is now mature and can be used for experimental data.\n\n## References",
      "__v": 0
    },
    {
      "_id": "5e795ef5d4f81c62f9a1a7b9",
      "label": "HERDING_SPIKES_2",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/herdingspikes/container/Dockerfile",
      "wrapper": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/herdingspikes2/_herdingspikes2.py",
      "website": "https://github.com/mhhennig/HS2",
      "authors": "Matthias Hennig, Jano Horvath, Cole Hurwitz, Oliver Muthmann, Albert Puente Encinas, Martino Sorbaro, Cesar Juarez Ramirez, and Raimon Wintzer",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_herding_spikes_2.md",
      "markdown": "# HERDING_SPIKES_2\n\n## Description\n\n*From the HerdingSpikes2 website*: This software provides functionality for high density electrophysiology. Detection, localisation and clustering of spike data from dense multielectrode arrays.\n\n## References\n[1] J.-O. Muthmann, H. Amin, E. Sernagor, A. Maccione, D. Panas, L. Berdondini, U.S. Bhalla, M.H. Hennig MH (2015). [Spike detection for large neural populations using high density multielectrode arrays](http://journal.frontiersin.org/article/10.3389/fninf.2015.00028/abstract). Front. Neuroinform. 9:28. doi: 10.3389/fninf.2015.00028.\n\n[2] G. Hilgen, M. Sorbaro, S. Pirmoradian, J.-O. Muthmann, I. Kepiro, S. Ullo, C. Juarez Ramirez, A. Puente Encinas, A. Maccione, L. Berdondini, V. Murino, D. Sona, F. Cella Zanacchi, E. Sernagor, M.H. Hennig (2016). [Unsupervised spike sorting for large scale, high density multielectrode arrays.](http://www.cell.com/cell-reports/fulltext/S2211-1247(17)30236-X) Cell Reports 18, 2521–2532. bioRxiv: <http://dx.doi.org/10.1101/048645>.",
      "__v": 0
    },
    {
      "_id": "5e795ef5d4f81c62f9a1a7b6",
      "label": "JRCLUST",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/jrclust/container/Dockerfile",
      "environment": "MATLAB",
      "wrapper": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/jrclust/_jrclust.py",
      "website": "https://github.com/JaneliaSciComp/JRCLUST",
      "authors": "James Jun and Alan Liddell",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_jrclust.md",
      "markdown": "# JRCLUST\n\n## Description\n\nFrom the website: JRCLUST is a scalable and customizable package for spike sorting on high-density silicon probes. It is written in MATLAB and CUDA. JRCLUST was originally developed by James Jun and is currently maintained by Vidrio Technologies.\n\n## References\n[1] Jun, JJ et al., Real-time spike sorting platform for high-density extracellular probes with ground-truth validation and drift correction. bioRxiv, 101030; doi: https://doi.org/10.1101/101030",
      "__v": 0
    },
    {
      "_id": "5e795ef5d4f81c62f9a1a7b2",
      "label": "SPYKING_CIRCUS",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/spykingcircus/container/Dockerfile",
      "wrapper": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/spykingcircus/spykingcircus.py",
      "website": "https://spyking-circus.readthedocs.io/en/latest/",
      "authors": "Pierre Yger and Olivier Marre",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_spyking_circus.md",
      "markdown": "_\n# SPYKING_CIRCUS\n\n## Description\n\nFrom the SpyKING CIRCUS website: The SpyKING CIRCUS is a massively parallel code to perform semi automatic spike sorting on large extra-cellular recordings. Using a smart clustering and a greedy template matching approach, the code can solve the problem of overlapping spikes, and has been tested both for in vitro and in vivo data, from tens of channels to up to 4225 channels.\n\n## References\n\nYger P., Spampinato, G.L.B, Esposito E., Lefebvre B., Deny S., Gardella C., Stimberg M., Jetter F., Zeck G. Picaud S., Duebel J., Marre O., A spike sorting toolbox for up to thousands of electrodes validated with ground truth recordings in vitro and in vivo, eLife 2018;7:e34518",
      "__v": 0
    },
    {
      "_id": "5e795ef5d4f81c62f9a1a7b0",
      "label": "KILOSORT2",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/kilosort2/container/Dockerfile",
      "environment": "MATLAB",
      "wrapper": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/kilosort2/_kilosort2.py",
      "website": "https://github.com/MouseLand/Kilosort2",
      "authors": "Marius Pachitariu",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_kilosort2.md",
      "markdown": "_\n# KILOSORT2\n\n## Description\n\n*From the KiloSort2 website*: Kilosort2: automated spike sorting with drift tracking and template matching on GPUs\n\nA Matlab package for spike sorting electrophysiological data up to 1024 channels. In many cases, and especially for Neuropixels probes, the automated output of Kilosort2 requires minimal manual curation.\n\n## Installation notes\n\nRequires CUDA toolkit to be installed\n\n## References",
      "__v": 0
    },
    {
      "_id": "5e795ef5d4f81c62f9a1a7b1",
      "label": "KLUSTA",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/klusta/container/Dockerfile",
      "wrapper": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/klusta/_klusta.py",
      "website": "https://github.com/kwikteam/klusta",
      "authors": "Cyrille Rossant, Shabnam Kadir, Dan Goodman, Max Hunter, and Kenneth Harris",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_klusta.md",
      "markdown": "_\n# KLUSTA\n\n## Description\n*From the Klusta website*: Klusta: automatic spike sorting up to 64 channel. \n\n[**klusta**]\n(https://github.com/kwikteam/klusta) is an open source package for automatic spike sorting of multielectrode neurophysiological recordings made with probes containing up to a few dozens of sites.\n\n**klusta** implements the following features:\n\n* **Kwik**: An HDF5-based file format that stores the results of a spike sorting session.\n* **Spike detection** (also known as SpikeDetekt): an algorithm designed for probes containing tens of channels, based on a flood-fill algorithm in the adjacency graph formed by the recording sites in the probe.\n* **Automatic clustering** (also known as Masked KlustaKwik): an automatic clustering algorithm designed for high-dimensional structured datasets.\n\n\n\n## References\n[1] Rossant, Cyrille, et al. (2016). Spike sorting for large, dense electrode arrays. Nature Neuroscience, 19, 634–641.\n[2] Kadir, S.N., Goodman, D.F. & Harris, K.D. (2014). High-dimensional cluster analysis with the masked EM algorithm. Neural Comput. 26, 2379–2394.",
      "__v": 0
    },
    {
      "_id": "5e795ef5d4f81c62f9a1a7b3",
      "label": "Waveclus",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/waveclus/container/Dockerfile",
      "wrapper": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/waveclus/_waveclus.py",
      "website": "https://github.com/csn-le/wave_clus/wiki",
      "authors": "F. J. Chaure, H. G. Rey and R. Quian Quiroga",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_waveclus.md",
      "markdown": "_\n# Waveclus\n\n## Description\n\nWave_clus is a fast and unsupervised algorithm for spike detection and sorting that runs under Windows, Mac or Linux operating systems.\n\nTo install, download this repository into a folder. In MATLAB (R2009b or higher) go to Set Path and add the directory wave_clus with subfolders to the MATLAB path.\n\n\n## References\n\n[1] A novel and fully automatic spike sorting implementation with variable number of features. F. J. Chaure, H. G. Rey and R. Quian Quiroga. Journal of Neurophysiology; 2018. https://doi.org/10.1152/jn.00339.2018\n\n[2] Quian Quiroga R, Nadasdy Z, Ben-Shaul Y. Unsupervised spike detection and sorting with wavelets and superparamagnetic clustering. Neural Comput 16: 1661–1687, 2004. doi:10.1162/089976604774201631.",
      "__v": 0
    },
    {
      "_id": "5e795ef5d4f81c62f9a1a7ba",
      "label": "YASS",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikesorters/yass/container/Dockerfile",
      "environment": "Python",
      "wrapper": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikesorters/yass/yass.py",
      "website": "https://yass.readthedocs.io/en/latest/",
      "authors": "Peter Lee, Eduardo Blancas, Nishchal Dethe, Shenghao Wu, Hooshmand Shokri, Calvin Tong, Catalin Mitelut, Liam Paninski",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_yass.md",
      "markdown": "_\n# YASS\n\n## Description\n\nFrom the YASS bioRxiv paper [2]: This manuscript describes an efficient, reliable pipeline for spike sorting on dense multi-electrode arrays (MEAs), where neural signals appear across many electrodes and spike sorting currently represents a major computational bottleneck. We present several new techniques that make dense MEA spike sorting more robust and scalable. Our pipeline is based on an efficient multi-stage “triage-then-cluster-then-pursuit” approach that initially extracts only clean, high-quality waveforms from the electrophysiological time series by temporarily skipping noisy or “collided” events (representing two neurons firing synchronously). This is accomplished by developing a neural network detection method followed by efficient outlier triaging. The clean waveforms are then used to infer the set of neural spike waveform templates through nonparametric Bayesian clustering. Our clustering approach adapts a “coreset” approach for data reduction and uses efficient inference methods in a Dirichlet process mixture model framework to dramatically improve the scalability and reliability of the entire pipeline. The “triaged” waveforms are then finally recovered with matching-pursuit deconvolution techniques. The proposed methods improve on the state-of-the-art in terms of accuracy and stability on both real and biophysically-realistic simulated MEA data. Furthermore, the proposed pipeline is efficient, learning templates and clustering much faster than real-time for a ≃ 500-electrode dataset, using primarily a single CPU core.\n\nNote: The YASS algorithm is not currently being tested on the SpikeForest site while the authors are working on releasing a newer version.\n\n## References\n\n[1] Lee, Jin Hyung, et al. \"Yass: Yet another spike sorter.\" Advances in Neural Information Processing Systems. 2017.\n\n[2] Paninski, Liam, and John Cunningham. \"Neural data science: accelerating the experiment-analysis-theory cycle in large-scale neuroscience.\" bioRxiv (2017): 196949.",
      "__v": 0
    },
    {
      "_id": "5e795ef5d4f81c62f9a1a7b4",
      "label": "MOUNTAINSORT4",
      "dockerfile": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/mountainsort4/container/Dockerfile",
      "wrapper": "https://github.com/flatironinstitute/spikeforest2/blob/master/spikeforest2/sorters/mountainsort4/_mountainsort4.py",
      "website": "https://github.com/flatironinstitute/mountainsort_examples/blob/master/README.md",
      "authors": "Jeremy Magland, Alex Barnett, Jason Chung, Loren Frank, and Leslie Greengard",
      "markdown_link": "https://github.com/flatironinstitute/spikeforest/blob/master/spikeforest/spikeforestsorters/descriptions/alg_mountainsort4.md",
      "markdown": "_\n# MOUNTAINSORT4\n\n## Description\n\nMountainSort is spike sorting algorithm that uses a novel density-based clustering method called ISO-SPLIT.\n\n## References\n\nChung, J. E., Magland, J. F., Barnett, A. H., Tolosa, V. M., Tooker, A. C., Lee, K. Y., ... & Greengard, L. F. (2017). A fully automated approach to spike sorting. Neuron, 95(6), 1381-1394.",
      "__v": 0
    }
  ]
}
